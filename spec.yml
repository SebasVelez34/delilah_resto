openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SebasVelez348/delilah_resto/1.0.0
info:
  description: Sistema de pedidos online para un restaurante poniendo en funcionamiento las partes necesarias para montar una REST API que permita realizar operaciones CRUD sobre una estructura de datos.
  version: "1.0.0"
  title: Delilah Restó
  contact:
    email: sebastianvelezvelasquez@gmail.com
tags:
  - name: product
    description: Operaciones disponibles para administrar productos del restaurante
  - name: order
    description: Operaciones disponibles para crear y administrar lo pedidos
  - name: user
    description: Permite crear y logearse a la API
components:
  schemas:
    ProductItem:
      type: object
      required:
        - name
        - image_path
        - price
      properties:
        id:
          type: integer
          format: id
          example: 12
        name:
          type: string
          example: Hamburguesa
        image_path:
          type: string
          example: 'www.imagenvalida.trz'
        price:
          type: integer
          example: 15000
        creator_user_id:
          type: integer
          example: 2
        created_at:
          type: string
          format: date-time
          example: '2020-08-29 09:12:33'
        updated_at:
          type: string
          format: date-time
          example: '2020-08-29 09:12:33'
    ProductItemRequired:
      type: object
      required:
        - name
        - image_path
        - price
      properties:
        name:
          type: string
          example: Hamburguesa
        image_path:
          type: string
          example: 'www.imagenvalida.trz'
        price:
          type: integer
          example: 15000
    OrderProduct:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 2
        payment_method:
          type: string
          example: ["cash","credit card","other"]
        total:
          type: integer
          example: 15000
        status_id:
          type: integer
          example: 3
        date:
          type: string
          example: '2020-10-26'
        time:
          type: string
          example: '12:19:00'
        description:
          type: string
          example: "2x Hamburguesa 3x Perro caliente"
        order_id:
          type: integer
          example: 10
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 10
    OrderRequired:
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: [
                		{
                			"product_id": 1,
                			"quantity": 2
                		},
                		{
                			"product_id": 4,
                			"quantity": 3
                		}
                	]
        payment_method:
          type: string
          example: ["cash","credit card","other"]
    User:
      type: object
      properties:
        fullname:
          type: string
          example: "John Doe"
        nick:
          type: string
          example: "JohnDoe34"
        email:
          type: string
          example: "johndoe34@correo.co"
        address:
          type: string
          example: "Calle falsa 123"
        phone:
          type: integer
          example: 1234
        password:
          type: string
          example: 'johndoe3434'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /product:
    get:
      tags:
        - product
      summary: CRUD products
      operationId: getAllProducts
      description: 
        Obtiene todos los productos que están disponibles en la base de datos.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Productos encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductItem'
        '204':
          description: Petición realizada con éxito pero sin resultados de productos
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error procesando la petición
    post:
      tags:
        - product
      summary: Añadir un producto al sistema
      operationId: addProduct
      description: Añadir un producto al sistema
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Producto creado
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Hamburguesa
                image_path:
                  type: string
                  example: 'www.imagenvalida.trz'
                price:
                  type: integer
                  example: 15000
        description: Producto para añadir
  '/product/{product}':
    get:
      tags:
        - product
      summary: CRUD products
      operationId: getSpecificProduct
      description: 
        Obtiene el producto solicitado.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: 'product'
          required: true
          schema:
            type: integer
          description: ID del producto
      responses:
        '200':
          description: Productos encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductItem'
        '204':
          description: Petición realizada con éxito pero sin resultados de productos
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error procesando la petición
    put:
      tags:
        - product
      summary: Actualizar un producto en el sistema
      operationId: updateProduct
      description: Actualizar un producto en el sistema
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Producto actualizado
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      parameters:
        - in: path
          name: 'product'
          required: true
          schema:
            type: integer
          description: ID del producto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductItemRequired'
        description: Producto para actualizar
    delete:
      tags:
        - product
      summary: Eliminar un producto en el sistema
      operationId: deleteProduct
      description: Eliminar un producto en el sistema
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Producto eliminado
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      parameters:
        - in: path
          name: 'product'
          required: true
          schema:
            type: integer
          description: ID del producto
  /order:
    get:
      tags:
        - order
      summary: CRUD products
      operationId: getAllOrders
      description: 
        Obtiene todos los pedidos disponibles en la base de datos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ordenes encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderProduct'
        '204':
          description: Petición realizada con éxito pero sin resultados de ordenes
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error procesando la petición
    post:
      tags:
        - order
      summary: Añadir un pedido al sistema
      operationId: addOrder
      description: Añadir un pedido al sistema
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Orden creada
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/OrderRequired'
        description: Orden para añadir
  '/order/{order}':
    post:
      tags:
        - order
      summary: Actualizar estado de un pedido en el sistema
      operationId: UpdateOrderStatus
      description: Añadir un pedido al sistema
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: 'order'
          required: true
          schema:
            type: integer
          description: ID del producto
      responses:
        '200':
          description: Orden actualizada
        '403':
          description: Sin autorización para acceder al recurso
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  status_id:
                    type: integer
                    example: 1
        description: Estado para actualizar el pedido
  /login:
    post:
      tags:
        - login
      summary: Iniciar sesion en la API
      operationId: login
      description: Iniciar sesion en la API
      responses:
        '200':
          description: Usuario logueado
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDQwMTg4MjMsImRhdGEiOnsiaWQiOjYwLCJuaWNrIjoiU2ViYXNWZWxleiIsImlzQWRtaW4iOjB9LCJpYXQiOjE2MDQwMTUyMjN9.O34a8lJCMztAb_gyFOqXB4C9qIpZeJt2eqXn-MUb6V4'
                  message:
                    type: string
                    example: "Authenticated user"
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  user:
                    type: integer
                    description: Nickname o email
                    example: usuario@correo.com
                  password:
                    type: string
                    example: laMejorConstraseña
        description: Estado para actualizar el pedido
  /signin:
    post:
      tags:
        - signin
      summary: Registrarse en el sistema
      operationId: register
      description: Registrarse en el sistema
      responses:
        '200':
          description: Usuario logueado
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "User created correctly"
        '500':
          description: Error en los parametros enviados o en el procesado del recurso
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
        description: Estado para actualizar el pedido